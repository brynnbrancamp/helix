/* vim: set ft=cpp: */
#include <sys>

template<typename T>
auto alloc(usize capacity) -> T*
{
	return (T*) new u8[capacity * sizeof(T)];
}

template<typename T>
auto realloc(T* old_ptr, usize old_capacity, usize new_capacity) -> T*
{
	for(int i = new_capacity; i < old_capacity; i++)
	{
		old_ptr[i].~T();
	}

	T* new_ptr = (T*) new u8[new_capacity * sizeof(T)];

	memcpy(new_ptr, old_ptr, new_capacity);

	delete[] (u8*) old_ptr;

	return new_ptr;
}

template<typename T>
auto dealloc(T* ptr, usize capacity) {
	for(int i = 0; i < capacity; i++)
	{
		ptr[i].~T();
	}

	delete[] (u8*) ptr;
}
