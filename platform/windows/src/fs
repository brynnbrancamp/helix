/* vim: set ft=cpp: */

class file_data
{
	HANDLE handle;
}

auto exists(path p) -> bool 
{
	i8 const* name_ptr = static_cast<i8 const*>(p.name);
	
	DWORD dw_attrib = GetFileAttributes(name_ptr);

	return (dw_attrib != INVALID_FILE_ATTRIBUTES) && !(dw_attrib & FILE_ATTRIBUTE_DIRECTORY);
}

auto create(path p) -> file 
{
	i8 const* name_ptr = static_cast<i8 const*>(p.name);
	
	HANDLE handle = CreateFileA
	(
		name_ptr,
		GENERIC_READ | GENERIC_WRITE,
		0,
		0,
		CREATE_NEW,
		FILE_ATTRIBUTE_NORMAL,
		0
	);

	if(GetLastError() == ERROR_FILE_EXISTS)
	{
		throw exception::file_exists();
	}

	file_data* data = new file_data();

	data.handle = handle;

	return file(p, data);
}

auto open(path p) -> file
{
	i8 const* name_ptr = static_cast<i8 const*>(p.name);
	
	HANDLE handle = CreateFileA
	(
		name_ptr,
		GENERIC_READ | GENERIC_WRITE,
		0,
		0,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		0
	);
	
	if(GetLastError() == ERROR_FILE_NOT_FOUND)
	{
		throw exception::file_not_found();
	}

	file_data* data = new file_data();

	data.handle = handle;

	return file(p, data);
}

auto remove(path p) -> bool
{
	i8 const* name_ptr = static_cast<i8 const*>(p.name);

	DWORD dw_attrib = GetFileAttributes(name_ptr);

	if(dw_attrib & FILE_ATTRIBUTE_DIRECTORY)
	{
		RemoveDirectoryA(name_ptr);
		return true;
	}

	if(dw_attrib != INVALID_FILE_ATTRIBUTES)
	{
		DeleteFileA(name_ptr);
		return true;
	}

	return false;
}

auto remove(file&& f) -> bool
{
	return remove(f.p);	
}
