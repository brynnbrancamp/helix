/* vim: set ft=cpp: */

#include <window>
#include <tensor>

#include <Windows.h>

namespace helix
{
	struct window_data
	{
		HWND hwnd;
		WINDOWPLACEMENT wpc;
		LONG style;
		LONG style_ex;
	};

	void window_set_visible(window& win, bool const& toggle)
	{
		ShowWindow(win.data->hwnd, win.visible ? SW_SHOW : SW_HIDE);
	}

	void window_set_fullscreen(window& win, bool const& toggle)
	{
		if(win.fullscreen && !toggle) 
		{
			SetWindowLong(win.data->hwnd, GWL_STYLE, win.data->style);
			SetWindowLong(win.data->hwnd, GWL_EXSTYLE, win.data->style_ex);
			ShowWindow(win.data->hwnd, SW_SHOWNORMAL);
			SetWindowPlacement(win.data->hwnd, &win.data->wpc);
		}
		else if(!win.fullscreen && toggle)
		{
			GetWindowPlacement(win.data->hwnd, &win.data->wpc );
			if (win.data->style == 0 )
				win.data->style = GetWindowLong(win.data->hwnd, GWL_STYLE);
			if (win.data->style_ex == 0 )
				win.data->style_ex = GetWindowLong(win.data->hwnd, GWL_EXSTYLE);

			LONG new_style =win.data->style;
			new_style &= ~WS_BORDER;
			new_style &= ~WS_DLGFRAME;
			new_style &= ~WS_THICKFRAME;

			LONG new_style_ex = win.data->style_ex;
			new_style_ex &= ~WS_EX_WINDOWEDGE;

			SetWindowLong(win.data->hwnd, GWL_STYLE, new_style | WS_POPUP);
			SetWindowLong(win.data->hwnd, GWL_EXSTYLE, new_style_ex | WS_EX_TOPMOST);
			ShowWindow(win.data->hwnd, SW_SHOWMAXIMIZED);	
		}

		win.fullscreen = toggle;
	}

	void window_set_title(window& win, string const& str)
	{
		SetWindowTextA(win.data->hwnd, static_cast<i8 const*>(str));
	}

	void window_set_resolution(window& win, v2<usize> const& resolution)
	{
		SetWindowPos
		(
		 	win.data->hwnd,
		 	0,
		 	0,
		 	0,
		 	static_cast<i32>(resolution[0]),
		 	static_cast<i32>(resolution[1]),
		 	SWP_NOMOVE
		);
	}
	
	void window_set_position(window& win, v2<usize> const& position)
	{
		SetWindowPos
		(
		 	win.data->hwnd,
		 	0,
		 	static_cast<i32>(position[0]),
		 	static_cast<i32>(position[1]),
		 	0,
		 	0,
		 	SWP_NOSIZE
		);
	}

	bool window_get_visible(window& win)
	{
		return win.visible;
	}

	bool window_get_fullscreen(window& win)
	{
		return win.fullscreen;
	}

	string window_get_title(window& win)
	{
		i8 data[256] = {};

		GetWindowTextA(win.data->hwnd, data, 256);

		string str(data);

		return str;
	}

	v2<usize> window_get_resolution(window& win)
	{
		RECT size;

		GetClientRect(win.data->hwnd, &size);

		v2<usize> resolution
		(
			static_cast<usize>(size.right),
			static_cast<usize>(size.bottom)
		);

		return resolution;
	}
	
	v2<usize> window_get_position(window& win)
	{
		RECT size;

		GetWindowRect(win.data->hwnd, &size);

		v2<usize> position
		(
			static_cast<usize>(size.left),
			static_cast<usize>(size.top)
		);

		return position;
	}

	static vec<window_event> event_buffer;

	LRESULT wnd_proc(HWND hwnd, UINT msg, WPARAM w_param, LPARAM l_param)
	{
		switch(msg)
		{
		case WM_CLOSE:
		{
			event_buffer.push(window_event(window_event_close_requested()));

			return true;
		}
		case WM_KEYDOWN:
		{
			option<key_code> key = convert_native_code(w_param);
			
			if(key.is_none())
				return true;
			
			event_buffer.push(window_event(window_event_key {
				.pressed = true,
				.key = key.unwrap()
			}));

			return true;
		}
		case WM_KEYUP:
		{
			option<key_code> key = convert_native_code(w_param);
			
			if(key.is_none())
				return true;

			event_buffer.push(window_event(window_event_key {
				.pressed = false,
				.key = key.unwrap()
			}));

			return true;
		}
		case WM_MOVE:
		{
			event_buffer.push(window_event(window_event_pointer {
				.position = v2<usize>
				(
					static_cast<usize>(LOWORD(l_param)), 
					static_cast<usize>(HIWORD(l_param))
				)
			}));

			return true;
		}
		case WM_SETFOCUS:
		{
			event_buffer.push(window_event(window_event_focus {
				.active = true
			}));

			return true;
		}
		case WM_KILLFOCUS:
		{
			event_buffer.push(window_event(window_event_focus {
				.active = false
			}));

			return true;
		}
		case WM_SIZE:
		{
			event_buffer.push(window_event(window_event_resize {
				.resolution = v2<usize>
				(
					static_cast<usize>(LOWORD(l_param)), 
					static_cast<usize>(HIWORD(l_param))
				)
			}));

			return true;
		}
		case WM_SIZING:
		{
			RECT const* client_area = reinterpret_cast<RECT const*>(l_param);
			event_buffer.push(window_event(window_event_resize {
				.resolution = v2<usize>
				(
					static_cast<usize>(client_area->right - client_area->left), 
					static_cast<usize>(client_area->bottom - client_area->top)
				)
			}));

			return true;
		}
		case WM_DESTROY:
		{
			PostQuitMessage(0);
		}
		}

		return DefWindowProcA(hwnd, msg, w_param, l_param);
	}

	window::window() :
		visible(property<window, bool, setter<window, bool>, getter<window, bool>>(*this, window_set_visible, window_get_visible)),
		fullscreen(property<window, bool, setter<window, bool>, getter<window, bool>>(*this, window_set_fullscreen, window_get_fullscreen)),
		title(property<window, string, setter<window, string>, getter<window, string>>(*this, window_set_title, window_get_title)),
		resolution(property<window, v2<usize>, setter<window, v2<usize>>, getter<window, v2<usize>>>(*this, window_set_resolution, window_get_resolution)),
		position(property<window, v2<usize>, setter<window, v2<usize>>, getter<window, v2<usize>>>(*this, window_set_position, window_get_position))
	{
		this->data = new window_data;

		const i8 class_name[] = "Helix";

		WNDCLASS wc = { sizeof(WNDCLASS) };

		wc.lpfnWndProc = wnd_proc;
		wc.lpszClassName = class_name;

		RegisterClass(&wc);

		const i8 window_name[] = "Window";

		this->data->hwnd = CreateWindowEx
		(
			0,
			class_name,
			window_name,
			WS_OVERLAPPEDWINDOW,
			CW_USEDEFAULT,
			CW_USEDEFAULT,
			CW_USEDEFAULT,
			CW_USEDEFAULT,
			0,
			0,
			0,
			0
		);

		if(this->data->hwnd == nullptr)
		{
			throw exception::system_error();
		}
	}

	window::~window()
	{
		DestroyWindow(this->data->hwnd);

		delete this->data;
	}

	auto window::poll() -> option<window_event>
	{
		MSG msg = {};

		while(PeekMessageA(&msg, this->data->hwnd, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessageW(&msg);
		}

		if(event_buffer.length() == 0)
		{
			return option<window_event>();
		}

		return option<window_event>(event_buffer.pop());
	}

	auto window::center() -> window&
	{
		RECT screen;

		GetWindowRect(GetDesktopWindow(), &screen);

		RECT size;

		GetWindowRect(this->data->hwnd, &size);

		this->position = v2<usize>
		(
			(screen.right - screen.left) / 2 - (size.right - size.left) / 2,
			(screen.bottom - screen.top) / 2 - (size.bottom - size.top) / 2
		);

		return *this;
	}

}
