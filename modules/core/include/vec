/* vim: set ft=cpp: */
#pragma once

#include <prelude>
#include <sys>
#include <math>
#include <traits>

namespace helix
{
	template <typename item>
	class vec
	{
	public:
		vec() : vec(0)
		{
		}

		vec(usize capacity) : 
			capacity(capacity),
			len(0),
			data(nullptr)
		{
			if(capacity == 0) 
			{
				return;
			}	

			this->data = alloc<item>(capacity);
		}

		~vec()
		{
			dealloc(this->data, this->capacity);
		}

		vec(const vec& other) : data(other.data) {}

		auto length() const -> usize
		{
			return this->len;
		}

		vec& operator =(const vec& other)
		{
			if (this == &other)
				return *this;

			this->clear();
			this->extend(other);

			return *this;
		}

		void push(const item& element)
		{
			if(capacity == 0)
			{
				this->data = alloc<item>(1);
				this->capacity = 1;
			} else if(capacity == len) {
				usize new_capacity = 1024; //next_power_of_two(this->capacity + 1);
				this->data = realloc(this->data, this->capacity, new_capacity);
				this->capacity = new_capacity;		
			}

			this->data[this->len++] = element;
		}

		auto extend(const vec& other) {
			for(usize i = 0; i < other.length(); i++)
			{
				this->push(other[i]);
			}
		}

		auto pop() -> item
		{
			return this->data[--this->len];
		}

		auto remove(usize index)
		{
			(*this)[index]~item();

			memcpy(this->data, this->data + 1, --this->len - index);
		}
		
		auto clear()
		{
			this->len = 0;
		}

		auto resize(usize new_length)
		{
			this->resize(new_length, item());
		}

		auto resize(usize new_length, const item& value)
		{
			usize old_length = this->length();
			
			if(new_length == old_length)
			{
				return;
			}

			if(new_length > old_length) {
				for(usize i = old_length; i < new_length; i++)
				{
					this->push(value);
				}
			}
			else
			{
				for(usize i = new_length; i > old_length; i--)
				{
					this->pop();
				}
			}
		}

		auto search(item const& subject) -> usize
		{	
			if(&subject < this->data || &subject > (this->data + this->len))
			{
				throw exception::out_of_bounds();
			}

			usize i = 0;
			item const& prospect = (*this)[i];

			while(prospect != subject)
				prospect = (*this)[++i];	

			return i;
		}

		auto begin() -> iterator<data>
		{
			return iterator(this->data[0]);
		}

		auto end() -> iterator<data>
		{
			return iterator(this->data[this->length()]);
		}

		auto operator [](usize index) const -> item& 
		{
			if(index >= this->len)
			{
				throw exception::out_of_bounds();
			}

			return this->data[index];
		}


		operator item*() const
		{
			return this->data;
		}

		operator item const*() const
		{
			return this->data;
		}
	private:
		usize capacity;
		usize len;
		item* data;
	};
}
