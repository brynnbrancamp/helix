/* vim: set ft=cpp: */
#pragma once

#include <vec>
#include <sys>
#include <math>

namespace helix
{
	class string 
	{
	public:
		string() : string("")
		{	
		}

		string(const i8 data[]) :
			data()
		{
			usize len = 0;
			while(data[len] != '\0')
				this->data.push(data[len++]);
		}

		string(const string& other) : string(other.data) {}
		
		auto find_last(const string& match) -> option<usize>
		{
			for(usize i = this->length(); i-- > 0;)
			{
				bool found = true;
				for
				(
					usize j = 0, k = i; 
					j < match.length() && k < this->length(); 
					j++, k++
				)
				{
					if((*this)[k] != match[j])
					{
						found = false;
					}
				}

				if(found)
				{
					return option<usize>(i);
				}
			}

			return option<usize>();
		}

		auto find_first(const string& match) -> option<usize>
		{
			for(usize i = 0; i < this->length(); i++)
			{
				bool found = true;
				for
				(
					usize j = 0, k = i; 
					j < match.length() && k < this->length(); 
					j++, k++
				)
				{
					if((*this)[k] != match[j])
					{
						found = false;
					}
				}

				if(found)
				{
					return option<usize>(i);
				}
			}

			return option<usize>();
		}

		auto substr(usize begin, usize end) -> string
		{
			usize size = end - begin;

			i8 buffer[size + 1] {};

			for(usize i = 0; i < size; i++)
			{
				buffer[i] = (*this)[begin + i];
			}

			return string(buffer);
		}

		auto length() const -> usize
		{
			return this->data.length();
		}

		auto operator =(const string& other) -> string&
		{
			if (this == &other)
				return *this;

			this->data.clear();
			this->data.extend(other.data);

			return *this;
		}

		auto operator ==(string const& lhs, string const& rhs) -> bool
		{
			if(lhs.length() != rhs.length())
			{
				return false;
			}

			for(usize i = 0; i < lhs.length(); i++)
			{
				if(lhs[i] != rhs[i])
				{
					return false;
				}
			}

			return true;
		}
		
		auto operator [](usize index) const -> i8& 
		{
			return this->data[index];
		}

		operator i8*() const
		{
			return this->data;
		}

		operator i8 const*() const
		{
			return this->data;
		}

	private:
		vec<i8> data;
	};

	usize strlen(i8 const* str);

	i8* strcpy(i8* dest, i8 const* src);

	void dtoa(f64 i, i8 b[], usize prec);

	template<typename num>
	auto itoa(num i, char b[])
	{
		i8 const digit[] = "0123456789";
		i8* p = b;

		if(i < 0)
		{
			*p++ = '-';
			i *= -1;
		}

		num shifter = i;

		do
		{
			++p;
			shifter /= 10;
		} while(shifter);

		*p = '\0';

		do
		{
			*--p = digit[i % 10];
			i /= 10;
		} while(i);
	}
}
