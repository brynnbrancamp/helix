/* vim: set ft=cpp: */
#pragma once

#include <prelude>
#include <tensor>
#include <traits>

namespace helix
{
	template<typename num>
	auto pow(num base, num power) -> num
	{
		if(power == 0)
		{
			return 1;
		} else if(power % 2 == 0)
		{
			return pow(base, power / 2) * pow(base, power / 2);
		} else
		{
			return base * pow(base, power / 2) * pow(base, power / 2);
		}
	}

	template<typename x, typename y, typename z>
	auto pow(x base, y power) -> z
	{
		return pow(static_cast<z>(base), static_cast<z>(power));
	}

	template<typename x, typename y>
	auto pow(x base, y power) -> x
	{
		return pow<x>(base, static_cast<x>(power));
	}

	template<typename num>
	auto ceil(num x) -> num
	{
		using other = condition<is_signed<num>, i64, u64>;
		other y = static_cast<other>(x);
		if(x < 0 || x == y)
		{
			return static_cast<num>(y);
		}
		return static_cast<num>(y + 1);
	}

	template<typename num>
	auto log(num x) -> num 
	{
		num value = -1;
		while(x) {
			value++;
			x >>= 1;
		}
		return value;
	}

	template<typename num, num y>
	auto log(num x) -> num 
	{
		return log(x) / log(y);
	}

	template<typename num>
	auto min(num x, num y) -> num
	{
		if(x < y) {
			return x;
		} else {
			return y;
		}
	}

	template<typename num>
	auto max(num x, num y) -> num
	{
		if(x > y) {
			return x;
		} else {
			return y;
		}
	}

	template<typename num>
	auto next_power_of_two(num x) -> num
	{
		return pow(2, ceil(log(x) / log(2)));
	}
}
