/* vim: set ft=cpp: */

#include <prelude>
#include <tensor>
#include <variant>
#include <key>
#include <property>

namespace helix
{
	class window;

	void window_set_visible(window& win, const bool& toggle);
	void window_set_fullscreen(window& win, const bool& toggle);
	void window_set_title(window& win, const string& str);
	void window_set_resolution(window& win, const v2<usize>& resolution);	
	void window_set_position(window& win, const v2<usize>& position);

	bool window_get_visible(window& win);
	bool window_get_fullscreen(window& win);
	string window_get_title(window& win);
	v2<usize> window_get_resolution(window& win);
	v2<usize> window_get_position(window& win);

	struct window_data;

	struct window_event_close_requested
	{
	};

	struct window_event_key
	{
		bool pressed;
		key_code key;
	};

	struct window_event_pointer
	{
		v2<usize> position;
	};

	struct window_event_focus
	{
		bool active;
	};

	struct window_event_resize
	{
		v2<usize> resolution;
	};

	using window_event = variant
	<
		window_event_close_requested,
		window_event_key,
		window_event_pointer,
		window_event_focus,
		window_event_resize
	>;

	class window
	{
	public:
		property
		<
			window,
			bool, 
			setter<window, bool>, 
			getter<window, bool>
		>
		visible;
		
		property
		<
			window,
			bool, 
			setter<window, bool>, 
			getter<window, bool>
		>
		fullscreen;

		property
		<
			window,
			string, 
			setter<window, string>, 
			getter<window, string>
		>
		title;
		
		property
		<
			window,
			v2<usize>, 
			setter<window, v2<usize>>, 
			getter<window, v2<usize>>
		>
		resolution;

		property
		<
			window,
			v2<usize>, 
			setter<window, v2<usize>>, 
			getter<window, v2<usize>>
		>
		position;

		window();	
		~window();

		window(const window& other) = delete;
		window& operator =(const window& other) = delete;

		auto poll() -> option<window_event>;

		auto center() -> window&;
	
		friend void window_set_visible(window& win, bool const& toggle);
		friend void window_set_fullscreen(window& win, bool const& toggle);
		friend void window_set_title(window& win, string const& str);
		friend void window_set_resolution(window& win, v2<usize> const& resolution);	
		friend void window_set_position(window& win, v2<usize> const& position);

		friend bool window_get_visible(window& win);
		friend bool window_get_fullscreen(window& win);
		friend string window_get_title(window& win);
		friend v2<usize> window_get_resolution(window& win);
		friend v2<usize> window_get_position(window& win);

		window_data* data;
	};
}
