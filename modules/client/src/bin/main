/* vim: set ft=cpp: */

#include <prelude>
#include <math>
#include <io>
#include <window>
#include <bitset>
#include <variant>

using namespace helix;

i32 main(i32 argc, i8* argv[])
{
	const string modules = "modules";
	const string platform = "platform";

	const string target = "target";

	const string windows = "windows";

	const string core = "core";
	const string vulkan = "vulkan";
	const string client = "client";

	build_system build;

	build.add_module_directories(modules, platform);

	build.set_target_directory(target);

	build.add_module(windows)
		.library()
		.load();

	build.add_module(core)
		.library()
		.dependency(windows)
		.load();

	build.add_module(vulkan)
		.library(module_link_dynamic)
		.dependency(core)
		.load(module_load_hot);

	build.add_module(client)
		.target()
		.dependency(core)
		.dependency(vulkan);

	window main_window;

	main_window.title = "Quasi";
	main_window.visible = true;
	main_window.resolution = v2<usize>(960, 540);
	main_window.center();

	bool run = true;

	while(run) {
		//handle window events
		build();
		
		option<window_event> event = main_window.poll();

		visit
		(
			[&run](auto&& event)
			{
				using type = decay<decltype(event)>;

				if(eq<type, window_event_close_requested>)
				{
					run = false;
					out << "close" << endl;
				}
				
				if(eq<type, window_event_key>)
				{
					out << "key" << endl;
				}
				
				if(eq<type, window_event_pointer>)
				{
					out << "pointer" << endl;
				}
				
				if(eq<type, window_event_focus>)
				{
					out << "focus" << endl;
				}
				
				if(eq<type, window_event_resize>)
				{
					out << "resize" << endl;
				}
			},	
			move(event)
		);
	}

	return 0;
}
